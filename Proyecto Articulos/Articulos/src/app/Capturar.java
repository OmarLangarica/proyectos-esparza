/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.sql.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.CallableStatement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class Capturar extends javax.swing.JFrame {

    public Capturar() {
        initComponents();
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        cargarTabla();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        groupGeneros = new javax.swing.ButtonGroup();
        groupAcciones = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        rbEliminar = new javax.swing.JRadioButton();
        rbNuevo = new javax.swing.JRadioButton();
        rbModificar = new javax.swing.JRadioButton();
        btnLimpiar = new javax.swing.JButton();
        btnGrabar = new javax.swing.JButton();
        jlNombre = new javax.swing.JLabel();
        txtDescripcion = new javax.swing.JTextField();
        jlDescripcion = new javax.swing.JLabel();
        jlTamaño = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        rbChico = new javax.swing.JRadioButton();
        rbMediano = new javax.swing.JRadioButton();
        jlPrecio = new javax.swing.JLabel();
        txtLPrecio = new javax.swing.JTextField();
        jlFamilia = new javax.swing.JLabel();
        cbFamilia = new javax.swing.JComboBox<>();
        txtID = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        rbGrande = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblArticulos = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Clientes");

        groupAcciones.add(rbEliminar);
        rbEliminar.setText("Eliminar");
        rbEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbEliminarActionPerformed(evt);
            }
        });

        groupAcciones.add(rbNuevo);
        rbNuevo.setText("Nuevo");
        rbNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbNuevoActionPerformed(evt);
            }
        });

        groupAcciones.add(rbModificar);
        rbModificar.setText("Modificar");
        rbModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbModificarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnGrabar.setText("Grabar");
        btnGrabar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGrabarActionPerformed(evt);
            }
        });

        jlNombre.setText("Nombre");

        jlDescripcion.setText("Descripcion");

        jlTamaño.setText("Tamaño");

        groupGeneros.add(rbChico);
        rbChico.setText("Chico");
        rbChico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbChicoActionPerformed(evt);
            }
        });

        groupGeneros.add(rbMediano);
        rbMediano.setText("Mediano");

        jlPrecio.setText("Precio");

        jlFamilia.setText("Familia");

        cbFamilia.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione", "Abarrotes", "Verduras", "Lacteos", "Limpieza" }));
        cbFamilia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFamiliaActionPerformed(evt);
            }
        });

        txtID.setEditable(false);

        lblID.setText("ID");

        groupGeneros.add(rbGrande);
        rbGrande.setText("Grande");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(145, 145, 145)
                        .addComponent(rbEliminar)
                        .addGap(18, 18, 18)
                        .addComponent(rbNuevo)
                        .addGap(18, 18, 18)
                        .addComponent(rbModificar)
                        .addGap(31, 31, 31)
                        .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnGrabar, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlDescripcion)
                            .addComponent(jlPrecio)
                            .addComponent(jlFamilia)
                            .addComponent(jlNombre)
                            .addComponent(jlTamaño))
                        .addGap(35, 35, 35)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rbChico)
                                .addGap(38, 38, 38)
                                .addComponent(rbMediano)
                                .addGap(34, 34, 34)
                                .addComponent(rbGrande))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDescripcion)
                                    .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                                    .addComponent(txtLPrecio)
                                    .addComponent(cbFamilia, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(29, 29, 29)
                                .addComponent(lblID)
                                .addGap(18, 18, 18)
                                .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbEliminar)
                    .addComponent(rbNuevo)
                    .addComponent(rbModificar)
                    .addComponent(btnLimpiar)
                    .addComponent(btnGrabar))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlNombre)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblID))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlDescripcion)
                    .addComponent(txtDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlTamaño)
                    .addComponent(rbChico)
                    .addComponent(rbMediano)
                    .addComponent(rbGrande))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlPrecio)
                    .addComponent(txtLPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlFamilia)
                    .addComponent(cbFamilia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tblArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nombre", "Descripcion", "Precio", "Tamaño", "Familia"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblArticulos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblArticulosMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblArticulos);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(363, 363, 363)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(350, 350, 350))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 593, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbModificarActionPerformed
        lblID.setVisible(true);
        txtID.setVisible(true);
        prenderBotones();
        limpiar();
    }//GEN-LAST:event_rbModificarActionPerformed

    private void rbNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbNuevoActionPerformed
        lblID.setVisible(false);
        txtID.setVisible(false);
        prenderBotones();
        limpiar();
    }//GEN-LAST:event_rbNuevoActionPerformed

    private void btnGrabarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGrabarActionPerformed
     if (rbEliminar.isSelected()) {
        eliminarRegistro();
    } else if (rbNuevo.isSelected()) {
        agregarRegistro();
    } else if (rbModificar.isSelected()) {
        modificarRegistro();
    } else {
        JOptionPane.showMessageDialog(this, "Seleccione una opción antes de continuar.", "Advertencia", JOptionPane.WARNING_MESSAGE);
    }
    }//GEN-LAST:event_btnGrabarActionPerformed

    private void rbEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbEliminarActionPerformed
        lblID.setVisible(true);
        txtID.setVisible(true);
        txtID.setEnabled(true);
        txtID.setEditable(true);
        txtNombre.setEnabled(false);
        txtDescripcion.setEnabled(false);
        rbChico.setEnabled(false);
        rbMediano.setEnabled(false);
        rbGrande.setEnabled(false);
        txtLPrecio.setEnabled(false);
        cbFamilia.setEnabled(false);
        limpiar();
    }//GEN-LAST:event_rbEliminarActionPerformed

    private void cbFamiliaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFamiliaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbFamiliaActionPerformed

    private void tblArticulosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblArticulosMouseClicked
        try{
            int fila = tblArticulos.getSelectedRow();
            int id = Integer.parseInt(tblArticulos.getValueAt(fila, 0).toString());
            
            PreparedStatement ps;
            ResultSet rs;
            
            Connection con = Conexion.getConexion();
            ps = con.prepareStatement("SELECT artid,artnombre, artdescripcion, artprecio, artTamaño, famid FROM ARTICULOS WHERE artid=?");
            ps.setInt(1, id);
            rs=ps.executeQuery();
            
            while(rs.next()){
                txtID.setText(String.valueOf(id));
                txtNombre.setText(rs.getString("artnombre"));
                txtDescripcion.setText(rs.getString("artdescripcion"));
                txtLPrecio.setText(rs.getString("artprecio")); 
                if(rs.getString("artTamaño").equals("C")){
                    rbChico.setSelected(true);
                }else if(rs.getString("artTamaño").equals("M")){
                    rbMediano.setSelected(true);
                }else if(rs.getString("artTamaño").equals("G")){
                    rbGrande.setSelected(true);
                }           
                
                int famid = rs.getInt("famid"); // Obtener el número de la base de datos
                // Asegurar que el valor esté en el rango correcto
                if (famid >= 1 && famid <= 4) {
                 cbFamilia.setSelectedIndex(famid); // Asignar el índice correspondiente
                } else {
                    cbFamilia.setSelectedIndex(0); // Si el valor es inválido, seleccionar "Seleccione"
                }

            }
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,"Error al asignar los valores "+e.getMessage());

        }
    }//GEN-LAST:event_tblArticulosMouseClicked

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void rbChicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbChicoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbChicoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Capturar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Capturar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Capturar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Capturar.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Capturar().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGrabar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JComboBox<String> cbFamilia;
    private javax.swing.ButtonGroup groupAcciones;
    private javax.swing.ButtonGroup groupGeneros;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel jlDescripcion;
    private javax.swing.JLabel jlFamilia;
    private javax.swing.JLabel jlNombre;
    private javax.swing.JLabel jlPrecio;
    private javax.swing.JLabel jlTamaño;
    private javax.swing.JLabel lblID;
    private javax.swing.JRadioButton rbChico;
    private javax.swing.JRadioButton rbEliminar;
    private javax.swing.JRadioButton rbGrande;
    private javax.swing.JRadioButton rbMediano;
    private javax.swing.JRadioButton rbModificar;
    private javax.swing.JRadioButton rbNuevo;
    private javax.swing.JTable tblArticulos;
    private javax.swing.JTextField txtDescripcion;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtLPrecio;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void eliminarRegistro() {
        String idTexto = txtID.getText().trim();

        if (idTexto.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Ingrese un ID para eliminar", "Error", JOptionPane.ERROR_MESSAGE);
        return;
        }

        int id;
        try {
         id = Integer.parseInt(idTexto);
            if (id <= 0) {
            JOptionPane.showMessageDialog(null, "El ID debe ser un número positivo", "Error", JOptionPane.ERROR_MESSAGE);
            return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Ingrese un número válido para el ID", "Error", JOptionPane.ERROR_MESSAGE);
            return;
         }
        
        try{
            Connection con = Conexion.getConexion();
            PreparedStatement ps = con.prepareStatement("DELETE FROM ARTICULOS WHERE artid=?");
            ps.setInt(1,id);
            if(ps.executeUpdate()>0){
                JOptionPane.showMessageDialog(null,"Registro eliminado exitosamente");
                limpiar();
                cargarTabla();
            }else{
                JOptionPane.showMessageDialog(null,"El registro no existe");

            }
            
   
        }catch(SQLException e){
            JOptionPane.showMessageDialog(null,"Error al eliminar"+e.getMessage());
        }
    }

    private void agregarRegistro() {
    if (!validarCampos()) {
        return; 
    }
    String nombre = txtNombre.getText();
    String descripcion = txtDescripcion.getText();
    String precio = txtLPrecio.getText();
    String tamaño = "";
    if (rbChico.isSelected()) {
        tamaño = "Chico";
    } else if (rbMediano.isSelected()) {
        tamaño = "Mediano";
    } else if (rbGrande.isSelected()) {
        tamaño = "Grande";
    }
    String familia = (String) cbFamilia.getSelectedItem();

    try {
        Connection con = Conexion.getConexion();
        CallableStatement cs = con.prepareCall("{CALL sp_grabar(?, ?, ?, ?, ?, ?)}");

        // Registrar el parámetro de salida (ID generado)
        cs.registerOutParameter(1, java.sql.Types.INTEGER);

        cs.setNull(1, java.sql.Types.INTEGER); 
        cs.setString(2, nombre);
        cs.setString(3, descripcion);
        cs.setDouble(4, Double.parseDouble(precio));
        cs.setString(5, tamaño); 
        int opcion = cbFamilia.getSelectedIndex();
        cs.setInt(6, opcion); 

        cs.execute();

        // Obtener el ID generado
        int idGenerado = cs.getInt(1);

        JOptionPane.showMessageDialog(null, "Registro agregado exitosamente. ID generado: " + idGenerado);
        
        limpiar();
        cargarTabla();

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al insertar: " + e.getMessage());
    }
}

    
    private boolean validarCampos() {
    String nombre = txtNombre.getText().trim();
    String descripcion = txtDescripcion.getText().trim();
    String tamaño = "";
    if(rbChico.isSelected()){
        tamaño = "Chico";
    }else if(rbMediano.isSelected()){
        tamaño = "Mediano";
    }else if(rbGrande.isSelected()){
        tamaño = "Grande";
    }
    String precio = txtLPrecio.getText().trim();
    int familiaIndex = cbFamilia.getSelectedIndex();

    // Expresión regular para validar solo letras (permite espacios y acentos)
    String regexLetras = "^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]+$";

    if (!nombre.matches(regexLetras)) {
        JOptionPane.showMessageDialog(null, "El nombre solo debe contener letras", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    /*if (!descripcion.matches(regexLetras)) {
        JOptionPane.showMessageDialog(null, "Los apellidos solo deben contener letras", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }*/

    if (nombre.isEmpty() || descripcion.isEmpty() || tamaño.isEmpty() || precio.isEmpty() || familiaIndex == -1) {
        JOptionPane.showMessageDialog(null, "Todos los campos son obligatorios", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    try {
        double limite = Double.parseDouble(precio);
        if (limite < 0) {
            JOptionPane.showMessageDialog(null, "El precio no puede ser negativo", "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Ingrese un número válido en el precio", "Error", JOptionPane.ERROR_MESSAGE);
        return false;
    }

    return true; 
}


    private void modificarRegistro() {
    String idTexto = txtID.getText().trim();
    String nombre = txtNombre.getText().trim();
    String descripcion = txtDescripcion.getText().trim();
    String tamaño = "";
    if(rbChico.isSelected()){
        tamaño = "Chico";
    }else if(rbMediano.isSelected()){
        tamaño = "Mediano";
    }else if(rbGrande.isSelected()){
        tamaño = "Grande";
    }
    String precioTexto = txtLPrecio.getText().trim();
    int familia = cbFamilia.getSelectedIndex();

    // Expresiones regulares para validación
    String regexLetras = "^[a-zA-ZáéíóúÁÉÍÓÚñÑ ]+$"; // Solo letras y espacios
    String regexNumeros = "^[0-9]+$"; // Solo números positivos

    // Validar ID
    if (idTexto.isEmpty() || !idTexto.matches(regexNumeros) || Integer.parseInt(idTexto) <= 0) {
        JOptionPane.showMessageDialog(null, "Ingrese un ID válido para modificar.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    int id = Integer.parseInt(idTexto); // Convertir a entero después de validar

    if (!nombre.matches(regexLetras)) {
        JOptionPane.showMessageDialog(null, "El nombre solo debe contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (!descripcion.matches(regexLetras)) {
        JOptionPane.showMessageDialog(null, "Descripción solo deben contener letras.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    if (tamaño.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Seleccione el tamaño.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    double precio;
    try {
        precio = Double.parseDouble(precioTexto);
        if (precio < 0) {
            JOptionPane.showMessageDialog(null, "El precio no puede ser negativo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(null, "Ingrese un número válido en el precio.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // intenta actualizar el registro en la base de datos
    try {
        Connection con = Conexion.getConexion();
        CallableStatement cs = con.prepareCall("{CALL sp_grabar(?, ?, ?, ?, ?, ?)}");
        
        cs.setInt(1, id); //se usa el ID existente para actualizar
        cs.setString(2, nombre);
        cs.setString(3, descripcion);
        cs.setDouble(4, precio);
        cs.setString(5, tamaño);
        cs.setInt(6, familia);

        int rowsAffected = cs.executeUpdate(); //veo cuantas filas fueron afectadas

        if (rowsAffected > 0) {
            JOptionPane.showMessageDialog(null, "Registro actualizado exitosamente.");
            limpiar();
            cargarTabla();
        } else {
            JOptionPane.showMessageDialog(null, "No se encontró un registro con ID " + id, "Error", JOptionPane.ERROR_MESSAGE);
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al actualizar: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }

}


    private void limpiar(){
        txtID.setText("");
        txtNombre.setText("");
        txtDescripcion.setText("");
        groupGeneros.clearSelection();
        txtLPrecio.setText("");
        cbFamilia.setSelectedIndex(0);
       
    }
    
    private void cargarTabla() {
    DefaultTableModel modeloTabla = (DefaultTableModel) tblArticulos.getModel();
    modeloTabla.setRowCount(0);

    PreparedStatement ps;
    ResultSet rs;
    ResultSetMetaData rsmd;
    int columnas;

    try {
        Connection con = Conexion.getConexion();
        //use el inner join para que salga el nombre de la familia en la tabla
        ps = con.prepareStatement("SELECT artid, artnombre, artdescripcion, artprecio, arttamaño, f.famnombre " +
                                  "FROM ARTICULOS a " +
                                  "INNER JOIN Familias f ON a.famid = f.famid");
        rs = ps.executeQuery();
        rsmd = rs.getMetaData();
        columnas = rsmd.getColumnCount();

        while (rs.next()) {
            Object[] fila = new Object[columnas];
            for (int i = 0; i < columnas; i++) {
                fila[i] = rs.getObject(i + 1);
            }
            // Convertir código de tamaño a nombre legible
            String codTamaño = (String) fila[4];
            switch (codTamaño) {
             case "C":
                 fila[4] = "Chico";
                 break;
             case "M":
                fila[4] = "Mediano";
                  break;
             case "G":
                 fila[4] = "Grande";
                 break;
    }
            modeloTabla.addRow(fila);
        }

    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "Error al cargar la tabla: " + e.getMessage());
    }
}

    
    private void prenderBotones(){
        txtID.setEnabled(false);
        txtNombre.setEnabled(true);
        txtDescripcion.setEnabled(true);
        rbChico.setEnabled(true);
        rbMediano.setEnabled(true);
        rbGrande.setEnabled(true);
        txtLPrecio.setEnabled(true);
        cbFamilia.setEnabled(true);
    }
    
    

}
